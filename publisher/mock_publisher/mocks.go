// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/makasim/amqpextra/publisher (interfaces: Connection,ConnectionReady,Channel)

// Package mock_publisher is a generated GoMock package.
package mock_publisher

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	publisher "github.com/makasim/amqpextra/publisher"
	amqp "github.com/streadway/amqp"
)

// MockConnection is a mock of Connection interface.
type MockConnection struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionMockRecorder
}

// MockConnectionMockRecorder is the mock recorder for MockConnection.
type MockConnectionMockRecorder struct {
	mock *MockConnection
}

// NewMockConnection creates a new mock instance.
func NewMockConnection(ctrl *gomock.Controller) *MockConnection {
	mock := &MockConnection{ctrl: ctrl}
	mock.recorder = &MockConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnection) EXPECT() *MockConnectionMockRecorder {
	return m.recorder
}

// MockConnectionReady is a mock of ConnectionReady interface.
type MockConnectionReady struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionReadyMockRecorder
}

// MockConnectionReadyMockRecorder is the mock recorder for MockConnectionReady.
type MockConnectionReadyMockRecorder struct {
	mock *MockConnectionReady
}

// NewMockConnectionReady creates a new mock instance.
func NewMockConnectionReady(ctrl *gomock.Controller) *MockConnectionReady {
	mock := &MockConnectionReady{ctrl: ctrl}
	mock.recorder = &MockConnectionReadyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnectionReady) EXPECT() *MockConnectionReadyMockRecorder {
	return m.recorder
}

// Conn mocks base method.
func (m *MockConnectionReady) Conn() publisher.Connection {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Conn")
	ret0, _ := ret[0].(publisher.Connection)
	return ret0
}

// Conn indicates an expected call of Conn.
func (mr *MockConnectionReadyMockRecorder) Conn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Conn", reflect.TypeOf((*MockConnectionReady)(nil).Conn))
}

// NotifyClose mocks base method.
func (m *MockConnectionReady) NotifyClose() chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyClose")
	ret0, _ := ret[0].(chan struct{})
	return ret0
}

// NotifyClose indicates an expected call of NotifyClose.
func (mr *MockConnectionReadyMockRecorder) NotifyClose() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyClose", reflect.TypeOf((*MockConnectionReady)(nil).NotifyClose))
}

// MockChannel is a mock of Channel interface.
type MockChannel struct {
	ctrl     *gomock.Controller
	recorder *MockChannelMockRecorder
}

// MockChannelMockRecorder is the mock recorder for MockChannel.
type MockChannelMockRecorder struct {
	mock *MockChannel
}

// NewMockChannel creates a new mock instance.
func NewMockChannel(ctrl *gomock.Controller) *MockChannel {
	mock := &MockChannel{ctrl: ctrl}
	mock.recorder = &MockChannelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChannel) EXPECT() *MockChannelMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockChannel) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockChannelMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockChannel)(nil).Close))
}

// NotifyClose mocks base method.
func (m *MockChannel) NotifyClose(arg0 chan *amqp.Error) chan *amqp.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyClose", arg0)
	ret0, _ := ret[0].(chan *amqp.Error)
	return ret0
}

// NotifyClose indicates an expected call of NotifyClose.
func (mr *MockChannelMockRecorder) NotifyClose(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyClose", reflect.TypeOf((*MockChannel)(nil).NotifyClose), arg0)
}

// NotifyFlow mocks base method.
func (m *MockChannel) NotifyFlow(arg0 chan bool) chan bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyFlow", arg0)
	ret0, _ := ret[0].(chan bool)
	return ret0
}

// NotifyFlow indicates an expected call of NotifyFlow.
func (mr *MockChannelMockRecorder) NotifyFlow(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyFlow", reflect.TypeOf((*MockChannel)(nil).NotifyFlow), arg0)
}

// Publish mocks base method.
func (m *MockChannel) Publish(arg0, arg1 string, arg2, arg3 bool, arg4 amqp.Publishing) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockChannelMockRecorder) Publish(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockChannel)(nil).Publish), arg0, arg1, arg2, arg3, arg4)
}
